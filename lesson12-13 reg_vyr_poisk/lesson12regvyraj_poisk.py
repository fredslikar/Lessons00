#Регулярные выражения - головная боль для программиста, который вынужден с ними работать
#Регулярные выражения здесь будут указаны по наростанию их частоты использования программистами
#Регулярные выражения - это строка, которая задает шаблон поиска подстрок в каком-либо тексте (шаблон по которому осуществляется поиск)
#МОжно импортировать модуль ре 
#создаем строчку с
#первый метод - метч, он ищет по заданному шаблону совпадения именно в начале строки (в скобка указываем то, что будем искать и через запятую где будем искать - в нашем случае строка с) 
#если объекта в начале не будет - выбъет ноне
#Регулярные выражения регистрозависимы - важно большие или маленькие буквы

import re
s = "ac/dsfs/dsfsdf/dfs/dfsf/sdfsdf/dfds/dfdf/sdsa/asdf"
result = re.match("ac", s)
result2 = re.match("ds", s)
print (result)
print (result2)

#метод серч - ищет на протяжении всей строки и возвращает первое найденное
#если хотим вывести без описания позицый лишь только искомые элементы, то в результе в квадратных скобках указываем ноль

result3 = re.search("sd", s)
print (result3)
print (result3[0])

#метод файндолл - он ищет и возвращает список всех найденных построк и сразу компанует из них список

result4 = re.findall("sd", s)
print (result4)

#метод сплит - разделяет нашу строчку по заданному условию
#в нашем случае будет разбит список на части там, где есть слеш - и формирует список 

result5 = re.split("/", s)
print (result5)

#также можно через запятую добавить элемент макссплит с цифрой, которая означает максимальное количество элементо, которое выведеться  в новом списке, а остальные выведутся, но не будут разбиты(разделены)

result6 = re.split("/", s, maxsplit = 3)
print (result6)

#метод саб - заменяет то регулярное выражение, которое мы дали на другую подстроку, которую мы дали
#на первой позиции указываем что мы меняем, а на второй - на что меняем, третий аргумент - название строки, в которой мы это делаем

result7 = re.sub("a", "s", s)
print (result7)

#метод фулматч - подходит ли наш шаблон (все наше регулярное выражение) под нашу конкретную строчку, т.е. являится ли наш шаблон поиска самой строчкой с (в нашем случае с)
#на первой позиции указываем что мы меняем, а на второй - на что меняем, третий аргумент - название строки, в которой мы это делаем
#не явлеется - поскольку строка с не совпадает с шаблоном

result8 = re.fullmatch("a", s)       
print (result8)

#создадим новую строку д, в которой будет лишь одна буква а, в таком случае шаблон поиска будет тождественен строке д   - выводимый результат с указание позиции элемента в строке

d = "a"
result9 = re.fullmatch("a", d)       
print (result9)




