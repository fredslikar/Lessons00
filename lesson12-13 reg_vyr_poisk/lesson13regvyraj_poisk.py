#Регулярные выражения - головная боль для программиста, который вынужден с ними работать
#Регулярные выражения здесь будут указаны по наростанию их частоты использования программистами
#Регулярные выражения - это строка, которая задает шаблон поиска подстрок в каком-либо тексте (шаблон по которому осуществляется поиск)
#МОжно импортировать модуль ре 
#создаем строчку с
#первый метод - метч, он ищет по заданному шаблону совпадения именно в начале строки (в скобка указываем то, что будем искать и через запятую где будем искать - в нашем случае строка с) 
#если объекта в начале не будет - выбъет ноне
#Регулярные выражения регистрозависимы - важно большие или маленькие буквы



#метод серч - ищет на протяжении всей строки и возвращает первое найденное
#если хотим вывести без описания позицый лишь только искомые элементы, то в результе в квадратных скобках указываем ноль
import re
x = "s8b7a65188 jfklsjjl------------sfhsfilDJKFJDKJLSDFe yo pauf io \7\ajkfjl jla jf j jafFF8846FFFsdfs        _____+++---fw fFF!!!! yu foi488ac/dsfs/dsfsdf/dfs/dfsf/sdfsdf/dfds/dfdf/sdsa/asdf"

#Буква ар - означает что наша сторка становиться "сырой" - строка в которой отключино экранирование(что бы конкретно полноценно могли воспользоваться всеми символами в т. ч. и спецсиволами)
#Посмотрим можноли заменить одну из букв точкой в шаблоне поиска (с.аш)

result0 = re.search(r"s.h", x)  
print (result0)

result1 = re.search(r"s..h", x)  
print (result1)

#обратный слеш д - выведет любую первую цифру, если ввести несколько рза - значит выведет первую несколькозначную цифру

result2 = re.search(r"\d", x)  
print (result2)

result3 = re.search(r"\d\d", x)  
print (result3)

result4 = re.search(r"\d\d\d\d", x)  
print (result4)

#обратный слеш большая Д - выведет любой первый символ, кроме цифры, если ввести несколько рза - значит выведет первую несколькозначный символ

result5 = re.search(r"\D", x)  
print (result5)

result6 = re.search(r"\D\D\D\D", x)  
print (result6)

#обратный слеш c - выведет любой первый пробельный символ (пробел, знак табуляции и конец строки)

result7 = re.search(r"\s", x)  
print (result7)

#обратный слеш большая С - выведет любой первый НЕпробельный символ (пробел, знак табуляции и конец строки)

result7 = re.search(r"\S", x)  
print (result7)

#обратный слеш w - выведет любую цыфру, букву или нижнее подчеркивание

result8 = re.search(r"\w", x)  
print (result8)
result9 = re.search(r"\w\w\w\w\w\w\w\w\w\w\w\w", x)  
print (result9)

#обратный слеш большая W - выведет любой символ, кроме цифры, буквы или нижнего подчеркивания

result10 = re.search(r"\W", x)  
print (result10)
result11 = re.search(r"\W\W\W", x)  
print (result11)

#обратный слеш б и за ним символы - означает поиска начала или конца слова (слово ограничено пробелами) по указанным символам

result12 = re.search(r"\bjf", x)  
print (result12)

#обратный слеш большая Б и за ним символы - означает поиска НЕначала и НЕконца слова (т.е. середины) (слово ограничено пробелами) по указанным символам

result13 = re.search(r"\Bjf", x)  
print (result13)


result14 = re.search(r"\Bfk", x)  
print (result14)

#обратный слеш д* - выведет ноль или более вхождений цифр

result15 = re.search(r"\d*", x)  
print (result15)

#обратный слеш д+ - выведет одно или более вхождений цифр

result16 = re.search(r"\d+", x)  
print (result16)

#в квадратных скобках указываем конкретный набор символов, который мы ищем, и однин из них при совпадении будет выведен

result17 = re.search(r"[s8aaas]", x)  
print (result17)

#в квадратных скобкахтакже можно указать диапазон чисел или букв, из котороко первое совпавшее число будет выведено

result18 = re.search(r"[4-8]", x)  
print (result18)

result18 = re.search(r"[a-f]", x)  
print (result18)

#в квадратных скобкахтакже можно указать диапазон чисел или букв, из котороко первое совпавшее число будет выведено
#Если нужно найти первый символ, кроме диапазона или указанных символов, то перед ними используется знак ^

result19 = re.search(r"[^4-8]", x)  
print (result19)

result20 = re.search(r"[^a-f]", x)  
print (result20)

#Если нужно найти либо однин символ либо другой, то между ними используем вертикальную черту, который найдется первым, тот и будет выведен(поскольку мы используем метод серч)

result21 = re.search(r"[4|8]", x)  
print (result21)

result22 = re.search(r"[x|f|4]", x)  
print (result22)

#Квантификатор - количество повторений задаваемоего параметра в поиске (записывается после в фигурных скобка)
#сравните тождественные записи, см. ниже

result23 = re.search(r"\d{4}", x)  
print (result23)

result24 = re.search(r"\d\d\d\d", x)  
print (result24)

result25 = re.search(r"\w\w\w\w\w\w\w\w\w\w\w\w", x)  
print (result25)

result26 = re.search(r"\w{12}", x)  
print (result26)

#если нужно указать, например, от 1 до 12 повторений то записываем этот диапазон через запятую в фигурных скобках


result27 = re.search(r"\w{1,12}", x)  
print (result27)

#Если после запятой не указывать цифру, то это означает повторений не менее чем цифра, например

result28 = re.search(r"\w{12,}", x)  
print (result28)

#Если до запятой не указывать цифру, то это означает повторений не более чем цифра, например

result29 = re.search(r"\d{,4}", x)  
print (result29)

#Задание нужно вывести все слова, которые начинаются на согласную букву в следующей фразе

p = "Hi! How are you? Sanks, I'm fine! Avto is good!"

#для этого используем метод файндолл

result30 = re.findall(r"[qwrtpsdfghjklzxcvbnmyQWRTYPSDFGHJKLZXCVBNM]\w+", p)
print (result30)



