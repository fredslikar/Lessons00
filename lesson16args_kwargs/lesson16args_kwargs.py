#создадим функцию с использованием аргументов

def summa (a, b, c):
    print(a + b + c)

#здесь функция работает нормально, когда задаем три аргумента как изначально было задумано

summa (1,2,3)


#но что будет, если мы задатим аргументов меньше?

summa(1,2,5)

#выведет ошибку: TypeError: summa() missing 1 required positional argument: 'c'
#но если мы применем заранее какие-то значения для аргументов функции, то они будут использованы по умолчанию

def summa2 (a, b=7, c=8):
    print(a + b + c)

summa2(10)
summa2(10,1,2)

#так же можно использовать привязку к параметрам напрямую через =. смотрим:

def summa3 (a, b=7, c=8):
    print(a, b, c)

summa3(10)
summa3(c=10,a=1,b=2)

#допустим нужно создать функцию, которая будет вычислять сумму всех аргументова переданных этой функции, но заранее мы не знаем их количество:

def summa5 (*args):         #неважно что вы напишите после звездочки, аргс - это лишь название кортежа
    print(args)
    print(type(args))
    print(sum(args))

summa5(10,2,3,4,5)

#для именованных аргументов используем не одну* а две ** звездочки:

def brand (**args2):         #неважно что вы напишите после звездочки, аргс - это лишь название кортежа
    print(args2)
    print(type(args2))
    
brand(a="aple",s="samsung",d="dell")

def brand2 (**args3):         
    for x, y in args3.items(): #перебераем пары ключ значение, а айтемс вернет нам пары ключ значение в виде маленьких картежек
        print(x, " : ", y)
        print(type(args3))
    
brand2(a="aple",s="samsung",d="dell")


